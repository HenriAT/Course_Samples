package seurantakaaviot.test;
// Generated by ComTest BEGIN
import java.util.ArrayList;
import static org.junit.Assert.*;
import org.junit.*;
import seurantakaaviot.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.23 00:17:44 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class HenkilotTest {



  // Generated by ComTest BEGIN
  /** testLisaa44 */
  @Test
  public void testLisaa44() {    // Henkilot: 44
    Henkilot henkilot = new Henkilot(); 
    Henkilo aku1 = new Henkilo(), aku2 = new Henkilo(); 
    assertEquals("From: Henkilot line: 47", 0, henkilot.getLkm()); 
    henkilot.lisaa(aku1); assertEquals("From: Henkilot line: 48", 1, henkilot.getLkm()); 
    henkilot.lisaa(aku2); assertEquals("From: Henkilot line: 49", 2, henkilot.getLkm()); 
    henkilot.lisaa(aku1); assertEquals("From: Henkilot line: 50", 3, henkilot.getLkm()); 
    assertEquals("From: Henkilot line: 51", aku1, henkilot.anna(0)); 
    assertEquals("From: Henkilot line: 52", aku2, henkilot.anna(1)); 
    assertEquals("From: Henkilot line: 53", aku1, henkilot.anna(2)); 
    assertEquals("From: Henkilot line: 54", false, henkilot.anna(1) == aku1); 
    assertEquals("From: Henkilot line: 55", true, henkilot.anna(1) == aku2); 
    try {
    assertEquals("From: Henkilot line: 56", aku1, henkilot.anna(3)); 
    fail("Henkilot: 56 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    henkilot.lisaa(aku1); assertEquals("From: Henkilot line: 57", 4, henkilot.getLkm()); 
    henkilot.lisaa(aku1); assertEquals("From: Henkilot line: 58", 5, henkilot.getLkm()); 
    henkilot.lisaa(aku1); assertEquals("From: Henkilot line: 59", 6, henkilot.getLkm());
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa83 
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa83() throws CloneNotSupportedException {    // Henkilot: 83
    Henkilot henkilot = new Henkilot(); 
    Henkilo henkilo1 = new Henkilo(); henkilo1.taytaAkuAnkanTiedoilla(); henkilo1.rekisteroi(); 
    Henkilo henkilo2 = new Henkilo(); henkilo2.taytaAkuAnkanTiedoilla(); henkilo2.rekisteroi(); 
    henkilot.korvaaTaiLisaa(henkilo1); assertEquals("From: Henkilot line: 88", 1, henkilot.getLkm()); 
    henkilot.korvaaTaiLisaa(henkilo2); assertEquals("From: Henkilot line: 89", 2, henkilot.getLkm()); 
    Henkilo henkilo3 = henkilo1.clone(); 
    henkilot.korvaaTaiLisaa(henkilo3); assertEquals("From: Henkilot line: 91", 2, henkilot.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoista113 */
  @Test
  public void testPoista113() {    // Henkilot: 113
    Henkilot henkilot = new Henkilot(); 
    Henkilo aku1 = new Henkilo(), aku2 = new Henkilo(), aku3 = new Henkilo(); 
    aku1.rekisteroi(); aku2.rekisteroi(); aku3.rekisteroi(); 
    int id1 = aku1.getTunnusNro(); 
    henkilot.lisaa(aku1); henkilot.lisaa(aku2); henkilot.lisaa(aku3); 
    assertEquals("From: Henkilot line: 119", 1, henkilot.poista(id1+1)); 
    assertEquals("From: Henkilot line: 120", null, henkilot.annaId(id1+1)); assertEquals("From: Henkilot line: 120", 2, henkilot.getLkm()); 
    assertEquals("From: Henkilot line: 121", 1, henkilot.poista(id1)); assertEquals("From: Henkilot line: 121", 1, henkilot.getLkm()); 
    assertEquals("From: Henkilot line: 122", 0, henkilot.poista(id1+3)); assertEquals("From: Henkilot line: 122", 1, henkilot.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaId141 */
  @Test
  public void testAnnaId141() {    // Henkilot: 141
    Henkilot henkilot = new Henkilot(); 
    Henkilo aku1 = new Henkilo(), aku2 = new Henkilo(), aku3 = new Henkilo(); 
    aku1.rekisteroi(); aku2.rekisteroi(); aku3.rekisteroi(); 
    int id1 = aku1.getTunnusNro(); 
    henkilot.lisaa(aku1); henkilot.lisaa(aku2); henkilot.lisaa(aku3); 
    assertEquals("From: Henkilot line: 147", true, henkilot.annaId(id1) == aku1); 
    assertEquals("From: Henkilot line: 148", true, henkilot.annaId(id1+1) == aku2); 
    assertEquals("From: Henkilot line: 149", true, henkilot.annaId(id1+2) == aku3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEtsiId165 */
  @Test
  public void testEtsiId165() {    // Henkilot: 165
    Henkilot henkilot = new Henkilot(); 
    Henkilo aku1 = new Henkilo(), aku2 = new Henkilo(), aku3 = new Henkilo(); 
    aku1.rekisteroi(); aku2.rekisteroi(); aku3.rekisteroi(); 
    int id1 = aku1.getTunnusNro(); 
    henkilot.lisaa(aku1); henkilot.lisaa(aku2); henkilot.lisaa(aku3); 
    assertEquals("From: Henkilot line: 171", 1, henkilot.etsiId(id1+1)); 
    assertEquals("From: Henkilot line: 172", 2, henkilot.etsiId(id1+2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEtsi252 */
  @Test
  public void testEtsi252() {    // Henkilot: 252
    Henkilot henkilot = new Henkilot(); 
    Henkilo henkilo1 = new Henkilo(); henkilo1.parse("1|Ankka Aku|030201-115H|"); 
    Henkilo henkilo2 = new Henkilo(); henkilo2.parse("2|Ankka Tupu|030552-123B|"); 
    Henkilo henkilo3 = new Henkilo(); henkilo3.parse("3|Susi Sepe|121237-121V|"); 
    Henkilo henkilo4 = new Henkilo(); henkilo4.parse("4|Ankka Iines|030245-115V|"); 
    Henkilo henkilo5 = new Henkilo(); henkilo5.parse("5|Ankka Roope|091007-408U|"); 
    henkilot.lisaa(henkilo1); henkilot.lisaa(henkilo2); henkilot.lisaa(henkilo3); henkilot.lisaa(henkilo4); henkilot.lisaa(henkilo5); 
    ArrayList<Henkilo> loytyneet; 
    loytyneet = (ArrayList<Henkilo>)henkilot.etsi("*s*"); 
    assertEquals("From: Henkilot line: 263", 2, loytyneet.size()); 
    loytyneet = (ArrayList<Henkilo>)henkilot.etsi(null); 
    assertEquals("From: Henkilot line: 265", 5, loytyneet.size()); 
    loytyneet = (ArrayList<Henkilo>)henkilot.etsi(""); 
    assertEquals("From: Henkilot line: 268", 5, loytyneet.size()); 
  } // Generated by ComTest END
}